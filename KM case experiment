import random

def km_experiment(n,k):
    E1=np.zeros((n,n))
    for i in range(0,n):
         E1[i,i]=1
    def arange(E1,n,k):
        for i in range(0,n-k+1):
            E1[i+k-1,i]=2**k
    for i in range(2,n+1):
         arange(E1,n,i)
    A= np.hstack((E1,eye(n)))
    b= np.ones((n,1))
    for i in range(0,n):
        b[i,0]=5**(i+1)
    B= np.array(range(n+1,2*n+1))
    N= np.array(range(1,n+1))
    c= zeros(2*n,1)
    c1=zeros(n,1)
    random.seed(k)
    for i in range(0,c1.shape[0]):
        c1[i,0]=random.gauss(mu=0.0, sigma=1.0)
    norm=((transpose(c1)*c1)**(1/2))[0]
    for i in range(0,c1.shape[0]):
        c[i,0]=c1[i,0]/norm    
    for i in range(n,c.shape[0]):
        c[i,0]=0
    return Iteration_Experiment(c,A,b,B,N)
    
import time
total_time=[]
cost_ite1=[]

total_ite=0
results2=[]
t0 = time.time()
for i in range(1,5001):
    results2.append(km_experiment(2,i))
    total_ite=total_ite+km_experiment(2,i)
t1 = time.time() - t0
total_time.append(t1)
cost_ite1.append(t1/total_ite)

#Code for all n similar as above

import numpy as np
n1=np.array([2,3,4,5,6,7,8,9,10])
import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(14, 8))
ax.set_xlabel('The dimension of the LP problem') 
ax.set_ylabel('Average cost of iterations')
ax.set_title('Average cost of iterations for different n')
ax.plot(n1,cost_ite1,color='b',marker='o')
fig.tight_layout()  
plt.show()

x=np.linspace(1,5000,5000)

average_10=np.zeros((5000))
average_2=np.zeros((5000))
average_3=np.zeros((5000))
average_4=np.zeros((5000))
average_5=np.zeros((5000))
average_6=np.zeros((5000))
average_7=np.zeros((5000))
average_8=np.zeros((5000))
average_9=np.zeros((5000))

for i in range(0,5000):
    average_2[i]=np.average(results2[0:(i+1)])
    average_3[i]=np.average(results3[0:(i+1)])
    average_4[i]=np.average(results4[0:(i+1)])
    average_5[i]=np.average(results5[0:(i+1)])
    average_6[i]=np.average(results6[0:(i+1)])
    average_7[i]=np.average(results7[0:(i+1)])
    average_8[i]=np.average(results8[0:(i+1)])
    average_9[i]=np.average(results9[0:(i+1)])  
    average_10[i]=np.average(results10[0:(i+1)])
    
import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(15, 20))
ax.plot(x, average_2, label='n=2')
ax.plot(x, average_3, label='n=3')
ax.plot(x, average_4, label='n=4')
ax.plot(x, average_5, label='n=5')
ax.plot(x, average_6, label='n=6')
ax.plot(x, average_7, label='n=7')
ax.plot(x, average_8, label='n=8')
ax.plot(x, average_9, label='n=9')
ax.plot(x, average_10, label='n=10')

ax.set_xlabel('Number of experiments')  # Add an x-label to the axes.
ax.set_ylabel('The averages')  # Add a y-label to the axes.
ax.set_title("The behaviour of averages for different n")  # Add a title to the axes.
ax.legend()
plt.show()

def draw_behaviour(k,x,average):
    
    fig, ax = plt.subplots(figsize=(15, 10))
    ax.plot(x, average, label='n=%s'%k) 
 
    ax.set_xlabel('Number of experiments')  # Add an x-label to the axes.
    ax.set_ylabel('The averages')  # Add a y-label to the axes.
    ax.set_title("The behaviour of averages for n=%s"%k)  # Add a title to the axes.
    ax.legend()
    plt.show()

draw_behaviour(2,x,average_2)
draw_behaviour(3,x,average_3)
draw_behaviour(4,x,average_4)
draw_behaviour(5,x,average_5)
draw_behaviour(6,x,average_6)
draw_behaviour(7,x,average_7)
draw_behaviour(8,x,average_8)
draw_behaviour(9,x,average_9)
draw_behaviour(10,x,average_10)


x3=np.linspace(2,5000,4999)

compare_2=np.zeros((4999))
compare_3=np.zeros((4999))
compare_4=np.zeros((4999))
compare_5=np.zeros((4999))
compare_6=np.zeros((4999))
compare_7=np.zeros((4999))
compare_8=np.zeros((4999))
compare_9=np.zeros((4999))
compare_10=np.zeros((4999))


for i in range(0,4999):
    compare_2[i]=(np.average(results2[0:i+2])-np.average(results2[0:i+1]))
    compare_3[i]=(np.average(results3[0:i+2])-np.average(results3[0:i+1]))
    compare_4[i]=(np.average(results4[0:i+2])-np.average(results4[0:i+1])) 
    compare_5[i]=(np.average(results5[0:i+2])-np.average(results5[0:i+1]))
    compare_6[i]=(np.average(results6[0:i+2])-np.average(results6[0:i+1]))
    compare_7[i]=(np.average(results7[0:i+2])-np.average(results7[0:i+1])) 
    compare_8[i]=(np.average(results8[0:i+2])-np.average(results8[0:i+1]))
    compare_9[i]=(np.average(results9[0:i+2])-np.average(results9[0:i+1]))
    compare_10[i]=(np.average(results10[0:i+2])-np.average(results10[0:i+1])) 


def draw_change(k,x,compare): 
    fig,ax= plt.subplots(figsize=(30,20))
    ax.fill_between(x, 0.01,-0.01, label='threshold1=0.01',alpha=0.2)
    ax.fill_between(x, 0.001,-0.001, label='threshold2-0.001',alpha=0.2) 
    ax.plot(x, compare, label='n=%s'%k) 
    ax.set_ylim(-0.1,0.1)
    ax.set_xlabel('Number of experiments')  # Add an x-label to the axes.
    ax.set_ylabel('The difference of averages')  # Add a y-label to the axes.
    ax.set_title("The difference of averages for n=%s"%k)  # Add a title to the axes.
    ax.legend(loc='upper right',fontsize=20,borderpad=3)
    plt.show()

def draw_detchange(k,x,compare): 
    fig,ax= plt.subplots(figsize=(30,20))   
    ax.fill_between(x, 0.01,-0.01, label='threshold1=0.01',alpha=0.2)
    ax.fill_between(x, 0.001,-0.001, label='threshold2=0.001',alpha=0.2) 
    ax.plot(x, compare, label='n=%s'%k) 
    ax.set_ylim(-0.01,0.01)
    ax.set_xlabel('Number of experiments')  # Add an x-label to the axes.
    ax.set_ylabel('The difference of averages')  # Add a y-label to the axes.
    ax.set_title("The difference of averages for n=%s"%k)  # Add a title to the axes.
    ax.legend(loc='upper right',fontsize=20,borderpad=3)
    plt.show()

draw_change(2,x3,compare_2)
draw_change(3,x3,compare_3)
draw_change(4,x3,compare_4)
draw_change(5,x3,compare_5)
draw_change(6,x3,compare_6)
draw_change(7,x3,compare_7)
draw_change(8,x3,compare_8)
draw_change(9,x3,compare_9)
draw_change(10,x3,compare_10)
draw_detchange(2,x3,compare_2)
draw_detchange(3,x3,compare_3)
draw_detchange(4,x3,compare_4)
draw_detchange(5,x3,compare_5)
draw_detchange(6,x3,compare_6)
draw_detchange(7,x3,compare_7)
draw_detchange(8,x3,compare_8)
draw_detchange(9,x3,compare_9)
draw_detchange(10,x3,compare_10)

def stabilzation_point(x,threshold):
    for i in range(0,x.shape[0]):
        xj=x[range(i,x.shape[0])]
        if (xj<=threshold).all():
            return i+1
    return None

stab_mat=np.ndarray((2,9))



stab_mat[0,0]=stabilzation_point(compare_2,0.01)
stab_mat[1,0]=stabilzation_point(compare_2,0.001)
stab_mat[0,1]=stabilzation_point(compare_3,0.01)
stab_mat[1,1]=stabilzation_point(compare_3,0.001)
stab_mat[0,2]=stabilzation_point(compare_4,0.01)
stab_mat[1,2]=stabilzation_point(compare_4,0.001)
stab_mat[0,3]=stabilzation_point(compare_5,0.01)
stab_mat[1,3]=stabilzation_point(compare_5,0.001)
stab_mat[0,4]=stabilzation_point(compare_6,0.01)
stab_mat[1,4]=stabilzation_point(compare_6,0.001)
stab_mat[0,5]=stabilzation_point(compare_7,0.01)
stab_mat[1,5]=stabilzation_point(compare_7,0.001)
stab_mat[0,6]=stabilzation_point(compare_8,0.01)
stab_mat[1,6]=stabilzation_point(compare_8,0.001)
stab_mat[0,7]=stabilzation_point(compare_9,0.01)
stab_mat[1,7]=stabilzation_point(compare_9,0.001)
stab_mat[0,8]=stabilzation_point(compare_10,0.01)
stab_mat[1,8]=stabilzation_point(compare_10,0.001)
print(stab_mat)

def draw_distribution(k,x):
    x=np.asarray(x)
    n=(x.max()-x.min())
    fig,ax= plt.subplots(figsize=(30,20))   
    ax.hist(x, bins=20) 
    ax.set_xlabel('Number of iterations')  # Add an x-label to the axes.
    ax.set_ylabel('The frequency')  # Add a y-label to the axes.
    ax.set_title("The distribution of iterations for n=%s"%k)  # Add a title to the axes.
    plt.show()

draw_distribution(2,results2)
draw_distribution(3,results3)
draw_distribution(4,results4)
draw_distribution(5,results5)
draw_distribution(6,results6)
draw_distribution(7,results7)
draw_distribution(8,results8)
draw_distribution(9,results9)
draw_distribution(10,results10)

def proportion(x,threshold):
    count=0
    for i in range(0,5000):
        if x[i]>=threshold:
            count+=1
    return count/5000   


avg_ite=[]

avg_ite.append(np.average(results2[0:5000]))
avg_ite.append(np.average(results3[0:5000]))
avg_ite.append(np.average(results4[0:5000])) 
avg_ite.append(np.average(results5[0:5000]))
avg_ite.append(np.average(results6[0:5000]))
avg_ite.append(np.average(results7[0:5000]))
avg_ite.append(np.average(results8[0:5000]))
avg_ite.append(np.average(results9[0:5000]))
avg_ite.append(np.average(results10[0:5000])) 
n1=np.array([2,3,4,5,6,7,8,9,10])
import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(14, 8))
ax.set_xlabel('The dimension of the LP problem') 
ax.set_ylabel('Average iterations')
ax.set_title('Average iterations for different n')
ax.plot(n1,avg_ite,color='b',marker='o')
fig.tight_layout()  
plt.show()


import scipy
from scipy.optimize import curve_fit
def poly(x, a, b):
    return a + b*(2**x) 

# initial data to fit
x=np.asarray(n1)
y=np.asarray(avg_ite)
# fit poly3d to x, y
coefs_poly, _ = curve_fit(poly, x, y)

# initialize some points
x_data = np.linspace(min(x), max(x), 50)
# transform x_data to y-axis values via poly3d
y_data = poly(x_data, *coefs_poly)
# plot the points
fig, ax = plt.subplots(figsize=(14, 8))
ax.set_xlabel('The dimension of the LP problem') 
ax.set_ylabel('Average iterations')
ax.set_title('Average iterations for different n')
ax.plot(x, y, 'ro',label='Results') 
ax.plot(x_data, y_data,label='Quadratic function')
ax.legend()
fig.tight_layout()  
plt.show()
